#!/usr/bin/env python3


from config import *


def _exec_transaction(transaction):
    # Helper function to execute the transaction.
    try:
        # Sign the transaction with your private key
        signed_transaction = web3.eth.account.sign_transaction(transaction, PKEY)

        # Send the signed transaction
        tx_hash = web3.eth.send_raw_transaction(signed_transaction.rawTransaction)

        # Wait for the transaction to be mined
        receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"receipt: {receipt}")
        print(f"Transaction successful with hash: {tx_hash.hex()}")

    except Exception as e:
        print(f"Error with transaction: {e}")


def get_mpt(ts):
    try:
        # Call the 'getLotteryActive' to check lottery state.
        greeting = contract.functions.getMPT(ts).call()
        print(f"Result was {greeting}")
        return greeting
    except Exception as e:
        print(f"Error reading sentiment: {e}")


def set_mpt(mpt):
    args = [mpt['ts'], mpt['returns'], mpt['volatility'], mpt['sharpe']]
    for asset in ["btc", "eth", "sol", "uni", "link",
                  "aave", "doge", "pepe", "wif"]:
        args.append(mpt['allocations'][asset])

    transaction = contract.functions.setMPT(args).build_transaction({
        'gas': 6721975,  # Gas limit.
        # 'gasPrice': web3.eth.gas_price,  # Current gas price.
        'nonce': web3.eth.get_transaction_count(user_address),
        'from': user_address,
    })
    _exec_transaction(transaction)


def validate():
    ts = 1731765403
    get_mpt(ts)
    mpt = {
        'ts': ts,
        'returns': 1537,
        'volatility': 29,
        'sharpe': 5324,
        'allocations': {
            'btc': 20, 'eth': 19, 'sol': 14, 'uni': 8, 'link': 13,
            'aave': 9, 'doge': 6, 'pepe': 7, 'wif': 4
        }
    }
    set_mpt(mpt)
    get_mpt(ts)


if __name__ == "__main__":
    pass
    validate()
